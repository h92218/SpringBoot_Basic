* @ComponentScan
- @Component 어노테이션이 붙은 클래스를 스캔해서 스프링 빈으로 등록한다.

* @ComponentScan 의 탐색 위치
- basePackages로 탐색할 시작 위치 지정 가능, 여러 위치 지정 가능
- basePackageClasses : 지정한 클래스의 패키지를 탐색 시작 위치로 지정함
- 미지정하는 경우 @ComponentScan이 붙은 설정정보 클래스의 패키지가 시작 위치가 됨.
  => 위치 정보를 미지정하고 설정정보 클래스의 위치를 프로젝트 최상단에 두면 편함

* 컴포넌트 스캔 기본 대상(아래 애노테이션이 붙은 경우 스프링은 부가 기능을 수행한다.)
- @Component
- @Controller : 스프링 MVC 컨트롤러로 인식
- @Service : 특별한 처리 없음, 비즈니스 계층 표시
- @Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
- @Configuration : 스프링 설정정보 인식, 싱글톤 처리

* ConflictingBeanDefinitionException
- 컴포넌트 스캔에 의해 자동으로 스프링 빈이 등록될 때 이름이 같은 경우 발생함
- application.properties에 spring.main.allow-bean-definition-overriding 설정
- true 인 경우 수동 등록한 빈이 있는 경우 수동빈이 자동빈을 오버라이딩 함
- false 인 경우 오류나게 함(스프링 기본값)

* 의존관계 주입 방법
- 생성자 주입
- 수정자 주입(setter 주입)
- 필드 주입
- 일반 메서드 주입

1. 생성자 의존관계 주입
- 생성자 호출 시점에 생성자를 통해 의존관계를 주입받는 방법
- 빈을 등록하며 의존관계 주입이 함께 일어남
- 생성자 호출 시점에 1번만 호출되는 것이 보장됨
- 불변, 필수적인 의존관계에서 사용
- 생성자가 한개만 있으면 @Autowired를 생략해도 됨
- 의존관계 주입은 한 번 일어나면 변경할 일이 보통 없음, 불변하게 설계할 수 있음
- 생성자 주입을 사용하면 필드에 final 키워드를 사용할 수 있다. 그래서 생성자에서 혹시라도 값이 설정되지 않는 오류를 컴파일 시점에 발견가능

2. 수정자 주입
- 스프링 라이프사이클 중 스프링 빈 생성(등록) - 스프링 빈 의존관계 주입
- 이 두번째 '스프링 빈 의존관계 주입' 단계에서 setter를 통해 의존관계를 주입한다.
- set 메소드에 @Autowired(required = false) 를 붙여준다. requred=false 인 경우 주입할 대상이 없어도 오류가 나지 않는다.(수정자 메서드 자체가 호출이 안 됨)
- 변경해도 되는 의존관계에서 사용
- set 메소드는 public으로 열어두어야 하며 다른 곳에서 변경할 가능성이 생긴다.

3. 필드 주입
- @Autowired 
  private MemberRepository memberRepository 말그대로 필드에 Autowired를 달아준다.
- 외부에서 변경이 불가
- 스프링컨테이너 없이는 테스트 불가
- 필드 주입을 권장하지 않는 이유
  -> 스프링컨테이너를 사용하지 않는 순수자바코드테스트의 경우 @Autowired가 동작하지 않게 됨
  -> 그러면 필드에 의존성 주입이 안 되어 NPE 가 발생한다.
  -> 이 경우 의존성을 주입하려면 setter를 만들어줘야 하는데 그럴 바에 수정자 주입 방식을 사용하면 되지 않겠는가
  -> 생성자 주입이나 수정자 주입 방식도 순수 자바 코드 테스트에서는 @Autowired가 동작하지 않지만 수동으로 의존관계 주입이 가능하다.
  -> 즉, 필드 주입 방식은 스프링을 통한 DI만 가능하므로 사용을 지양하는 것임

* 일반 메서드 주입
- 수정자 주입과 비슷하며, 일반 메서드에 @Autowired를 붙이는 것.
- 한번에 여러 필드를 주입 받을 수 있다는 장점이 있음 
- 일반적으로 사용하지 않음


* NouniqueBeanDefinitionException
- 의존관계 주입시에 조회대상빈이 2개 이상인 경우 발생한다.

* 조회 대상 빈이 2개 이상일 때 해결 방법
- @Autowired :  타입매칭 시도 후 복수개인 경우 필드 명, 파라미터명으로 빈을 찾아온다.
- @Qualifier : 추가 구분자. 단점 : 주입 받을 때 모든 코드에 @Qualifier를 붙여야 함
- @Primary : 우선순위 지정

* 자동주입할 대상이 없을 때의 옵션 처리
1. Autowired(requried = false)
- 자동주입할 대상이 없으면 수정자 메서드 자체가 호출이 안 됨.

2. @Nullable
-> 자동주입할 대상이 없으면 Null이 들어간다. 특정필드에만 사용해도 됨.

3. Optional
-> 자동주입할 대상이 없으면 Optional.empty가 들어감. 특정 필드에만 사용해도 됨.


* 자동 빈 등록과 수동 빈 등록
- 자동 빈 등록 : @ComponentScan에 의해 스프링 빈으로 자동 등록되고 @Autowired를 통해 의존관계 자동주입
- 수동 빈 등록 : @Bean 
- 핵심 비즈니스 로직 : 유사한 패턴을 가지는 경우가 많으며 그 수다 많음. 문제 발생시 문제 부분 파악이 쉽도록 자동 빈 등록 사용 권장
- 기술지원 로직 : DB연결설정이나 공통로그처리 등 비즈니스 로직을 지원하는 부분. 애플리케이션에 광범위하게 영항을 미친다. 가급적 수동 빈 등록으로 문제부분이 어디인지 명확하게 알 수 있도록 수동 빈 등로 권장

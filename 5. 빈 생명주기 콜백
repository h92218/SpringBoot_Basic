* 스프링 빈의 라이프 사이클(싱글톤)
1. 스프링 컨테이너 생성
2. 스프링 빈 생성
3. 의존관계 주입
4. 초기화 콜백 - 의존관계 주입이 완료되면 콜백메서드를 통해 초기화 시점을 알려준다.
5. 사용
6. 소멸 전 콜백(빈이 소멸되기 직전에 호출됨)
7. 스프링 종료

* 객체 생성시에 생성자로 초기화 안 하고 초기화 콜백메서드를 사용하는 이유?
- 객체 생성부분과 초기화하는 부분을 나누는 것이 유지보수 관점에서 좋음
- 정도에 따라 판단하여 분리.
- 객체 생성후 초기화를 지연시킬수도 있음.


* 인터페이스로 콜백 받는 법(스프링 전용 인터페이스)
- InitializingBean, DisposableBean 인터페이스를 사용
implements Initializing Bean, Disposable Bean
@Override afterPropertiesSet() <- 초기화 후 호출됨
          destroy() <-종료 전 호출됨
- 외부 라이브러리에 적용할 수 없고, 메서드 이름을 변경할 수 없으므로 잘 사용하지 않음


* 메서드로 구현하는 방법
- Configuration에서 빈 등록 시 @Bean(initMethod ="메서드이름", destroyMethod = "메서드이름")
- 코드가 아니라 설정정보를 사용하기 때문에 코드를 고칠 수 없는 외부 라이브러리에도 적용 가능 
- destroyMethod의 기본값은 inferred(추론) 이며 따라서 close, shutdown 등의 이름을 가진 메서드를 찾아 사용한다. 이 기능 사용 안 하려면 공백으로 둘 것

* 어노테이션으로 구현하는 방법
- @PostConstruct , @PreDestroy
- 자바에서 제공하는 기능
- 외부 라이브러리에 적용하지 못함

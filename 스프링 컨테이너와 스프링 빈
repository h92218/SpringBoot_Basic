* ApplicationContext
  BeanFactory의 기능을 상속받는다.
  빈 관리기능 + 편리한 부가기능 제공
    - MessageSource 기능 제공 : 국가에 맞는 언어로 출력
    - 환경변수 : 환경별로 정보처리 기능 제공
    - 애플리케이션 이벤트 : 이벤트를 발행하고 구독하는 모델 지원
    - 리소스 조회 : 파일,클래스패스,외부 등에서 리소스를 편리하게 조회


* BeanFactory
- 스프링 컨테이너 최상위 인터페이스
- getBean() 제공


* 스프링 컨테이너는 다양한 형식의 설정정보 사용 가능
- AppConfig.class ( 어노테이션 기반)
- appConfig.xml (컴파일 없이 변경 가능함)


* 스프링 빈 설정 메타 정보 - BeanDefinition
- @Bean, <bean> 사용하면 메타정보가 생성됨
- 스프링컨테이너는 이 메타정보를 기반으로 빈을 생성함

출력 예시
beanDefinitionName = memberService, beanDefinition : Root bean: class [null]; scope=; abstract=false; 
lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=appConfig; 
factoryMethodName=memberService; initMethodName=null; destroyMethodName=(inferred); defined in hello.core.AppConfig
- 어노테이션 config를 쓰면 factoryMethod를 통해 bean을 등록하는 방식이다.

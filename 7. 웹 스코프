* 웹 스코프
request :  HTTP 요청 하나가 들어오고 나갈 때 까지 유지됨. 각각의 요청마다 별도의 빈 인스턴스가 생성되고 관리됨
session : HTTP session과 동일한 생명주기를 가짐
application : Servlet Context와 동일한 생명주기를 가짐
websocket : websocket과 동일한 생명주기를 가짐


* request 스코프 @Scope("request")
- HTTP 요청이 끝나는 시점에 소멸된다. predestroy 사용 가능
-> 해당 스코프로 설정한 빈은 HTTP 요청이 와야 생성된다.
-> 즉 애플리케이션 실행시점에는 오류가 발생한다는 것(No thread-bound Request found)
-> 오류 해결방법 (1) ObjectProvider를 사용하여 스프링 컨테이너에 생성 요청 지연
                 (2) 프록시 사용 @Scope(value="request", proxyMode=ScopedProxMode.TARGET_CLASS)  or .INTERFACES 
                     객체가 필요한 시점까지 진차 객체 조회를 지연시킴


* proxyMode = ScopedProxyMode.TARGET_CLASS
- CGLIb이라는 라이브러리로 내 클리스를 상속받은 가짜 프록시 객체를 만들어서 주입한다.
- 스프링컨테이너에 이 가짜 프록시 객체를 등록한다.
- ac.getBean 해도 프록시 객체가 조회됨.
- 요청이 오면 그때 내부에서 진짜 빈을 요청하는 위임 로직이 들어있다.
- 다형성과 DI 컨테이너가 가진 강점 

* requestScope 객체를 사용하면 좋은 점
- requestURL 같은 웹과 관련된 정보가 웹과 관련없는 서비스 계층까지 넘어가지 않도록 함.
- 서비스 계층은 웹 기술과 분리하는 것이 유지보수 관점에서 좋음

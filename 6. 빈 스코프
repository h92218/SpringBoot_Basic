* 빈 스코프란
- 빈이 존재할 수 있는 범위
- @Scope("prototype") @Scope("singleton")
- 싱글톤 : 기본스코프, 스프링컨테이너의 시작과 종료까지 유지되는 가장 넓은 범위를 가짐
- 프로토타입 : 스프링 컨테이너는 프로토타입 빈의 생성과 의존관계 주입까지만 개입함. @PreDestroy 같은 종료 메서드가 호출되지 않는다.

* 웹 관련 스코프
- request : 웹 요청이 들어오고 나갈때까지 유지됨.
- session : 웹 세션이 생성되고 종료될때까지 유지됨.
- application : 웹의 서블릿 컨텍스트와 같은 범위로 유지됨.

* 싱글톤 스코프의 빈을 요청하면 같은 객체 인스턴스의 스프링 빈을 반환한다.
* 프로토타입의 빈을 요청하면 요청되는 시점에 생성하여 매번 다른 스프링 빈을 반환한다.

* 프로토타입 빈의 특징
- 싱글톤 빈은 스프링 컨테이너 생성시점에 초기화가 실행되지만 프로토타입 빈은 스프링컨테이너에서 빈을 조회할 때 생성, 초기화가 됨
- 컨테이너가 종료될 때 @PreDestroy 같은 종료메서드가 실행되지 않으므로 클라이언트가 직접 종료메서드를 호출해야 함.

* DL : Dependency Lookup 의존관계 조회(탐색)
직접 필요한 의존관계를 찾는 것

* 싱글톤 빈에서 프로토타입 빈을 사용하는 방법
- 싱글톤 빈에서 프로토 타입 빈을 사용하려면 프로토 타입빈을 매번 새로 생성해서 사용해야 하므로 매번 스프링 컨테이너에 요청해야 한다.
-> ApplicationContext 통해서 요청하면 스프링컨테이너에 종속된다.
-> 지정한 빈을 컨테이너에서 찾아주는 Dependency Lookup 기능을 제공해주는 것이 ObjectProvider ( ObjectFactory는 예전버전. ObjectProvider는 기능추가한 버전)
-> 별도의 라이브러리가 필요 없으며 spring에서 제공하는 기능으로 스프링에 의존함
-> private ObjectProvider<PrototypeBean> provider;
-> PrototypeBean pB = provider.getObject();

* 싱글톤 빈에서 프로토타입 빈을 사용하는 다른 방법
- Provider<T>를 사용한다.
- 자바 표준에서 제공하는 기능으로 스프링이 아닌 컨테이너에서도 사용할 수 있음
- javax.inject 의존성을 gradle에 추가해야 함
-> private Provider<PrototypeBean> provider;
-> provider.get(); //객체가져오기

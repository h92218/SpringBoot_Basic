* @ComponentScan 의 탐색 위치
- basePackages로 탐색할 시작 위치 지정 가능, 여러 위치 지정 가능
- basePackageClasses : 지정한 클래스의 패키지를 탐색 시작 위치로 지정함
- 미지정하는 경우 @ComponentScan이 붙은 설정정보 클래스의 패키지가 시작 위치가 됨.
  => 위치 정보를 미지정하고 설정정보 클래스의 위치를 프로젝트 최상단에 두면 편함

* 컴포넌트 스캔 기본 대상(아래 애노테이션이 붙은 경우 스프링은 부가 기능을 수행한다.)
- @Component
- @Controller : 스프링 MVC 컨트롤러로 인식
- @Service : 특별한 처리 없음, 비즈니스 계층 표시
- @Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
- @Configuration : 스프링 설정정보 인식, 싱글톤 처리

* ConflictingBeanDefinitionException
- 컴포넌트 스캔에 의해 자동으로 스프링 빈이 등록될 때 이름이 같은 경우 발생함
- application.properties에 spring.main.allow-bean-definition-overriding 설정
- true 인 경우 수동 등록한 빈이 있는 경우 수동빈이 자동빈을 오버라이딩 함
- false 인 경우 오류나게 함(스프링 기본값)

* 의존관계 주입 방법
- 생성자 주입
- 수정자 주입(setter 주입)
- 필드 주입
- 일반 메서드 주입

* 생성자 주입
- 제일 많이 씀
- 빈을 등록하며 의존관계 주입이 함께 일어남
- 생성자 호출 시점에 1번만 호출되는 것이 보장됨
- 불변, 필수적인 의존관계에서 사용
- 생성자가 한개만 있으면 @Autowired를 생략해도 됨

* 수정자 주입
- ex) setMemberRepository
- 의존관계 두번째 단계에서 일어남(?)
- 선택적으로 사용가능 @Autowired(required = false) 를 붙여준다
- 변경해도 되는 의존관계에서 사용


* 필드 주입
- 외부에서 변경이 불가
- 안 쓰는 편이 좋음

* 일반 메서드 주입
- 수정자 주입과 비슷함
- 한번에 여러 필드를 주입 받을 수 있음
- 일반적으로 사용하지 않음
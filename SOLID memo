1. SRP (Single Responsibility Principle) 단일책임 원칙
-> 하나의 클래스는 하나의 책임

2. OCP (Open Close Principle) 개방-폐쇄 원칙
-> 되도록이면 클라이언트 코드를 변경하지 않도록 객체를 생성하고 연관관계를 맺어주는 별도의 설정을 외부에 둔다. (이걸 스프링이 해줌)

3. LSP (Liskov Substitution Principle) 리스코프 치환 원칙
-> 단순 컴파일 성공에 그치는게 아니라 기능적으로 인터페이스 규약을 지켜서 구현해야 함

4. ISP (Interface Segregation Principle) 인터페이스 분리의 원칙
-> 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 나음 

5. DIP (Dependency Inversion Principle) 의존관계 역전 원칙
-> 클라이언트가 인터페이스를 봐라봐야지 구현체를 바라보면 안 됨(역할에 의존해야 한다는 뜻)
-> 예) MemberRepository mr = new MemoryMemberRepository(); // 구현체를 직접 가져다 쓰면 DIP 위반

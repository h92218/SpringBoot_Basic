* 싱글톤 패턴
-> 웹 어플리케이션은 수많은 요청이 들어오는데 요청때마다 객체를 생성하면 리소스가 낭비되잖아?
-> 클래스 인스턴스가 1개만 생성되는 디자인패턴
-> 객체가 1개만 생성되고 공유하여 사용함
-> private 생성자를 사용하여 외부에서 new 생성자로 생성하지 못하게 함
-> static으로 instance 생성 및 조회메서드 생성하여 이 조회메서드로 호출 시 항상 같은 인스턴스 반환
-> 스프링 컨테이너는 싱글턴 패턴을 적용하지 않아도 객체 인스턴스를 싱글톤으로 관리함

* 싱글톤 방식의 주의점
-> 클라이언트에서 값을 변경할 수 있는 필드가 있으면 안 됨
-> 필드 대신에 자바에서 공유되지 않는 지역변수, 파라미터, ThreadLocal 사용 
-> (필드) : 생성자와 메서드 전체에서 사용됨(멤버변수, 전역변수). 객체가 소멸되지 않는 한 객체와 함께 존재함. 지역변수와 다르게 자동으로 초기값을 갖는다.


* @Configuration
- 붙이면 CGLIB 기술을 사용하여 싱글톤을 보장함
- 안 붙이고 @Bean만 사용해도 스프링 빈으로 등록되지만 싱글톤을 보장하지 않음.

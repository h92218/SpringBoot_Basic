1. SRP (Single Responsibility Principle) 단일책임 원칙
-> 하나의 클래스는 하나의 책임(기능)을 가짐.
어떠한 기능에 대해 변경이 필요할 경우 수정해야 할 대상이 명확해짐.

2. OCP (Open Close Principle) 개방-폐쇄 원칙
-> 새로운 동작을 추가하여 애플리케이션의 기능을 확장할 수 있다.
그런데 이제 기존의 코드를 수정하지 않아야하는.
어떻게? 
기존 코드에서는 인터페이스를 주입해놓고
인터페이스를 implement한 구체화 클래스에서 기능을 확장하면 됨.

3. LSP (Liskov Substitution Principle) 리스코프 치환 원칙
-> 자식클래스는 부모클래스와 같은 방식으로 동작해야 함.
자식클래스는 부모 클래스의 책임을 무시하거나 재정의하지 않고 확장만 수행하도록 해야 LSP를 만족한다.

4. ISP (Interface Segregation Principle) 인터페이스 분리의 원칙
-> 특정 클라이언트를 위한 인터페이스 여러개가 범용 인터페이스 하나보다 나음 
인터페이스 분리 원칙은 큰 덩어리의 인터페이스(여러 기능을 가진 인터페이스)를 작은 조각들로 나누어 각 클래스가 필요한 기능에만 의존하도록 하여
코드의 유연성과 재사용성을 높일수 있음.

5. DIP (Dependency Inversion Principle) 의존관계 역전 원칙
-> 클라이언트가 인터페이스를 봐라봐야지 구현체를 바라보면 안 됨(역할에 의존해야 한다는 뜻)
구체 클래스에 의존하지 않고 추상 클래스(또는 인터페이스)에 의존함
-> 예) MemberRepository mr = new MemoryMemberRepository(); // 구현체를 직접 가져다 쓰면 DIP 위반
